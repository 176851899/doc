(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{519:function(t,s,a){"use strict";a.r(s);var e=a(56),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"lint-staged"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged"}},[t._v("#")]),t._v(" lint-staged")]),t._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("h3",{attrs:{id:"_1-安装husky"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装husky"}},[t._v("#")]),t._v(" 1.安装Husky")]),t._v(" "),a("p",[t._v("husky是一个git hook的管理工具，实现了大部分的git hook，一般情况下，lint-staged会用在git的hook回调中，如果不想自己写githooks，那么最简单的就是和 husky一起使用。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install husky@4.3.8 -D\n或者\nyarn add husky@4.3.8 -D\n")])])]),a("h3",{attrs:{id:"_2-安装lint-staged"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装lint-staged"}},[t._v("#")]),t._v(" 2.安装lint-staged")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install -D lint-staged\n或者\nyarn add lint-staged --dev\n")])])]),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("package.json中配置husky和lint-staged。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"husky": {\n  "hooks": {\n    "pre-commit": "lint-staged"\n  }\n},\n"lint-staged": {\n  "src/**/*.{js,vue}": [\n    "eslint",    //指令配置，需要先安装eslint\n  ]\n}\n')])])]),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),a("p",[t._v("尝试提交代码 "),a("code",[t._v('git commit -m "test"')]),t._v("，会进行代码校验，若代码有错会提示错误信息")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git commit -m "test: test lint "\nhusky > pre-commit (node v10.15.3)\n‼ Some of your tasks use `git add` command. Please remove it from the config since all modifications made by tasks will be automatically added to the git commit index.\n\n[STARTED] Preparing...\n[SUCCESS] Preparing...\n[STARTED] Running tasks...\n[STARTED] Running tasks for src/**/*.{js,vue}\n[STARTED] vue-cli-service lint\n[FAILED] vue-cli-service lint [FAILED]\n[FAILED] vue-cli-service lint [FAILED]\n[SUCCESS] Running tasks...\n[STARTED] Applying modifications...\n[SKIPPED] Skipped because of errors from tasks.\n[STARTED] Reverting to original state because of errors...\n[SUCCESS] Reverting to original state because of errors...\n[STARTED] Cleaning up...\n[SUCCESS] Cleaning up...\n\n× vue-cli-service lint:\nerror: Parsing error: Unterminated string constant\n\n  22 |   methods: {\n  23 |     submit() {\n> 24 |       this.$http.get(xxxxhello").then(res => {\n     |                               ^\n  25 |         this.list = res.data.data.list;\n  26 |       });\n  27 |     } at src\\views\\About.vue:38:30:\n  36 |   methods: {\n  37 |     submit() {\n> 38 |       this.$http.get(xxxxhello").then(res => {\n     |                              ^\n  39 |         this.list = res.data.data.list;\n  40 |       });\n  41 |     }\n\n\n1 error found.\nhusky > pre-commit hook failed (add --no-verify to bypass)\nerror Command failed with exit code 1.\n')])])]),a("p",[t._v("根据提示的错误信息修改代码，即可保证上传的代码没有错误")]),t._v(" "),a("h2",{attrs:{id:"自定义配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义配置"}},[t._v("#")]),t._v(" 自定义配置")]),t._v(" "),a("p",[t._v("详见："),a("a",{attrs:{href:"https://www.cnblogs.com/jiaoshou/p/12250278.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/jiaoshou/p/12250278.html"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);